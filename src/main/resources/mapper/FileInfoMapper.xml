<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cc.rd.dao.FileInfoMapper">
  <resultMap id="BaseResultMap" type="com.cc.rd.entity.FileInfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="origin_name" jdbcType="VARCHAR" property="originName" />
    <result column="file_size" jdbcType="BIGINT" property="fileSize" />
    <result column="file_ext" jdbcType="VARCHAR" property="fileExt" />
    <result column="file_hash" jdbcType="VARCHAR" property="fileHash" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="display_name" jdbcType="VARCHAR" property="displayName" />
    <result column="created_at" jdbcType="BIGINT" property="createdAt" />
    <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
    <result column="updated_at" jdbcType="BIGINT" property="updatedAt" />
    <result column="updated_by" jdbcType="VARCHAR" property="updatedBy" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
    <result column="file_mask" jdbcType="INTEGER" property="fileMask" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, origin_name, file_size, file_ext, file_hash, description, display_name, created_at, 
    created_by, updated_at, updated_by, is_deleted, file_mask
  </sql>
  <select id="selectByExample" parameterType="com.cc.rd.entity.FileInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from file_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from file_info
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from file_info
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.cc.rd.entity.FileInfoExample">
    delete from file_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cc.rd.entity.FileInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into file_info (origin_name, file_size, file_ext, 
      file_hash, description, display_name, 
      created_at, created_by, updated_at, 
      updated_by, is_deleted, file_mask
      )
    values (#{originName,jdbcType=VARCHAR}, #{fileSize,jdbcType=BIGINT}, #{fileExt,jdbcType=VARCHAR}, 
      #{fileHash,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{displayName,jdbcType=VARCHAR}, 
      #{createdAt,jdbcType=BIGINT}, #{createdBy,jdbcType=VARCHAR}, #{updatedAt,jdbcType=BIGINT}, 
      #{updatedBy,jdbcType=VARCHAR}, #{isDeleted,jdbcType=BIT}, #{fileMask,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cc.rd.entity.FileInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into file_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="originName != null">
        origin_name,
      </if>
      <if test="fileSize != null">
        file_size,
      </if>
      <if test="fileExt != null">
        file_ext,
      </if>
      <if test="fileHash != null">
        file_hash,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="displayName != null">
        display_name,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="fileMask != null">
        file_mask,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="originName != null">
        #{originName,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        #{fileSize,jdbcType=BIGINT},
      </if>
      <if test="fileExt != null">
        #{fileExt,jdbcType=VARCHAR},
      </if>
      <if test="fileHash != null">
        #{fileHash,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="displayName != null">
        #{displayName,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=BIGINT},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
      <if test="fileMask != null">
        #{fileMask,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cc.rd.entity.FileInfoExample" resultType="java.lang.Long">
    select count(*) from file_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update file_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.originName != null">
        origin_name = #{record.originName,jdbcType=VARCHAR},
      </if>
      <if test="record.fileSize != null">
        file_size = #{record.fileSize,jdbcType=BIGINT},
      </if>
      <if test="record.fileExt != null">
        file_ext = #{record.fileExt,jdbcType=VARCHAR},
      </if>
      <if test="record.fileHash != null">
        file_hash = #{record.fileHash,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.displayName != null">
        display_name = #{record.displayName,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=BIGINT},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=BIGINT},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
      <if test="record.fileMask != null">
        file_mask = #{record.fileMask,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update file_info
    set id = #{record.id,jdbcType=BIGINT},
      origin_name = #{record.originName,jdbcType=VARCHAR},
      file_size = #{record.fileSize,jdbcType=BIGINT},
      file_ext = #{record.fileExt,jdbcType=VARCHAR},
      file_hash = #{record.fileHash,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      display_name = #{record.displayName,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=BIGINT},
      created_by = #{record.createdBy,jdbcType=VARCHAR},
      updated_at = #{record.updatedAt,jdbcType=BIGINT},
      updated_by = #{record.updatedBy,jdbcType=VARCHAR},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      file_mask = #{record.fileMask,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cc.rd.entity.FileInfo">
    update file_info
    <set>
      <if test="originName != null">
        origin_name = #{originName,jdbcType=VARCHAR},
      </if>
      <if test="fileSize != null">
        file_size = #{fileSize,jdbcType=BIGINT},
      </if>
      <if test="fileExt != null">
        file_ext = #{fileExt,jdbcType=VARCHAR},
      </if>
      <if test="fileHash != null">
        file_hash = #{fileHash,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="displayName != null">
        display_name = #{displayName,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=BIGINT},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="fileMask != null">
        file_mask = #{fileMask,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cc.rd.entity.FileInfo">
    update file_info
    set origin_name = #{originName,jdbcType=VARCHAR},
      file_size = #{fileSize,jdbcType=BIGINT},
      file_ext = #{fileExt,jdbcType=VARCHAR},
      file_hash = #{fileHash,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      display_name = #{displayName,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=BIGINT},
      created_by = #{createdBy,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=BIGINT},
      updated_by = #{updatedBy,jdbcType=VARCHAR},
      is_deleted = #{isDeleted,jdbcType=BIT},
      file_mask = #{fileMask,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>